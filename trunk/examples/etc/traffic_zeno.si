// traffic.ti
// This file contains the modules for a traffic lights controller. Each
// intersection is assumed to contain banks of lights. Each light bank
// provides the three lights Red, Amber and Green. A sensor module controls
// a set of compatible bank of lights. A compatible set is one where the
// light banks can have synchronized transitions. An example would be the
// two banks of lights that control though traffic in opposite directions.
// A polling module polls each sensor in a round robin fashion and queues
// a sensor that is ready to go. A dispatcher dequeues the sensors that
// are ready and lets them proceed.

// global variables
var busy: bool        // used to update the global shared variable sensor
var sensor: [0..3]    // there can be upto four sensors
var n_sensors: [0..3] // number of sensors. It would be nice to have
                       // support for initialization expressions, even
                       // constants
var qelement: [0..3]  // global variable used to queue and dequeue

// sensor module
// Constants are not currently supported by ticc. When we do support
// constants and extend cloning to include constants, we can have
// parameterizable modules. For now, one needs to create as many copies
// of a module as needed with different parameters

module Sensor_0:
  var state: [0..5]  // Can be Init, Red, Waiting, Checking, Green and Amber
                      // It would be nice if TICC supports enum types
                      // for better readability
  var myid: [0..3]   // id of this sensor. It would have been nice to
                      // have constant declarations
  var w: [0..7]      // weight is proportional to car arrivals and
                      // maxes out at 7. This models a finite number of
                      // physical embedded sensors at a light in an
                      // intersection
  var t: clock       // clock to control transitions in a sensor
  var control: bool  // Used to remain in Green as long as no other sensor
                      // has been activated

  // environment generates an output to register all units. Each sensor
  // reacts to that and does the equivalent of reset state generation
  input registerUnits : {
    local: true ==> state' := 0, myid' := 0
  }

  // actions at state Init, the initial state. I am assuming that variables
  // are given an initial value depending on their type. Ideally, 'left of
  // the range of the type.

  // transition to Red
  input arm : {
    global: true ==> sensor' = myid

    local: state = 0 ==> state' := 1, w' := 0, t' := 0
  }

  // Red state transitions

  // As long as time is less than 5 remain in Red
  input sense : {
    global: sensor = myid ==>

    // if we see sense for a different sensor then toggle control
    local: state = 1 & t < 5 ==> w' := w + 1 mod 8
           else state = 3 & sensor != myid ==> control' := false
           else state = 3 & sensor = myid ==>

           // if we detect a sense for us when in state Amber, then nominally
           // set weight w to 1. This will ensure that we eventually leave
           // Red if no more cars arrive to activate this sensor

           else state = 4 & sensor = myid ==> w' := 1
           else state = 4 & sensor != myid ==>
  }

  // Let this turn go when polled if there are no cars waiting and time
  // elapses
  input pass : {
    global: true ==> sensor' = myid

    local: state = 1 & t = 5 & w = 0 ==> t' := 0
  }
  // Notify polling module that you are ready to go and move to Waiting state
  input ready : {
    global: true ==> sensor' = myid

    local: state = 1 & t = 5 & w != 0 ==> state' := 2
  }

  // Waiting state actions

  // When given the go ahead proceed to Green state
  input go : {
    global: true ==> sensor' = myid

    local: state = 2 ==> state' := 3, t' := 0, control' := true
  }

  // Green state actions

  // We would like to remain in Green as long as we have control, which
  // means none of the other sensors have been activated through the env
  // sense inputs. Since there is no way of modeling a silent transition
  // that has no associated action, I generate an output action here
  // Further, it would be nice to have some permitted dynamism in the
  // conditional expressions for time with the ability to define an
  // upper bound. I would like to time in Green proportional to the
  // weight of the cars waiting at Green. Same is true for Amber where we
  // would like to use the speed limit to change waiting time.

  local tau : {
    state = 3 & control & t = 10 ==> t' = 0
  }

  // when we no longer have control and time has elapsed move to state Amber
  local tau : {
    state = 3 & not control & t = 10 ==> state' = 4 & t' = 0 & w' = 0
  }

  // Amber state actions

  // here again it would be nice to wait for a variable amount of time
  // bounded above. The variability is needed to model stopping times
  // for cars based on speed limit

  // transition when time elapses. We go back to Red
  output done : {
    state = 4 & t = 5 ==> state' = 1
  }

endmodule

// sensor module - 2

module Sensor_1:
  var state: [0..5]  // Can be Init, Red, Waiting, Checking, Green and Amber
                      // It would be nice if TICC supports enum types
                      // for better readability
  var myid: [0..3]   // id of this sensor. It would have been nice to
                      // have constant declarations
  var w: [0..7]      // weight is proportional to car arrivals and
                      // maxes out at 7. This models a finite number of
                      // physical embedded sensors at a light in an
                      // intersection
  var t: clock       // clock to control transitions in a sensor
  var control: bool  // Used to remain in Green as long as no other sensor
                      // has been activated

  // environment generates an output to register all units. Each sensor
  // reacts to that and does the equivalent of reset state generation
  input registerUnits : {
    local: true ==> state' := 0, myid' := 1
  }

  // actions at state Init, the initial state. I am assuming that variables
  // are given an initial value depending on their type. Ideally, 'left of
  // the range of the type.

  // transition to Red
  input arm : {
    global: true ==> sensor' = myid

    local: state = 0 ==> state' := 1, w' := 0, t' := 0
  }

  // Red state transitions

  // As long as time is less than 5 remain in Red
  input sense : {
    global: sensor = myid ==>

    // if we see sense for a different sensor then toggle control
    local: state = 1 & t < 5 ==> w' := w + 1 mod 8
           else state = 3 & sensor != myid ==> control' := false
           else state = 3 & sensor = myid ==>

           // if we detect a sense for us when in state Amber, then nominally
           // set weight w to 1. This will ensure that we eventually leave
           // Red if no more cars arrive to activate this sensor

           else state = 4 & sensor = myid ==> w' := 1
           else state = 4 & sensor != myid ==>
  }

  // Let this turn go when polled if there are no cars waiting and time
  // elapses
  input pass : {
    global: true ==> sensor' = myid

    local: state = 1 & t = 5 & w = 0 ==> t' := 0
  }
  // Notify polling module that you are ready to go and move to Waiting state
  input ready : {
    global: true ==> sensor' = myid

    local: state = 1 & t = 5 & w != 0 ==> state' := 2
  }

  // Waiting state actions

  // When given the go ahead proceed to Green state
  input go : {
    global: true ==> sensor' = myid

    local: state = 2 ==> state' := 3, t' := 0, control' := true
  }

  // Green state actions

  // We would like to remain in Green as long as we have control, which
  // means none of the other sensors have been activated through the env
  // sense inputs. Since there is no way of modeling a silent transition
  // that has no associated action, I generate an output action here
  // Further, it would be nice to have some permitted dynamism in the
  // conditional expressions for time with the ability to define an
  // upper bound. I would like to time in Green proportional to the
  // weight of the cars waiting at Green. Same is true for Amber where we
  // would like to use the speed limit to change waiting time.

  local tau : {
    state = 3 & control & t = 100 ==> t' = 0
  }

  // when we no longer have control and time has elapsed move to state Amber
  local tau : {
    state = 3 & not control & t = 100 ==> state' = 4 & t' = 0 & w' = 0
  }

  // Amber state actions

  // here again it would be nice to wait for a variable amount of time
  // bounded above. The variability is needed to model stopping times
  // for cars based on speed limit

  // transition when time elapses. We go back to Red
  output done : {
    state = 4 & t = 5 ==> state' = 1
  }

endmodule

// polling module
// This module polls all sensors in a round robin fashion and queues the
// ones that are ready

// Note: I am assuming that we have a mod function or are willing to add
// one such function. We need a non-trivial expression evaluator

module Poll:
  var state: [0..5]      // state variable
  var l_sensor: [0..3]   // local variable used to track sensor Ids
  var l_qelement: [0..3] // local variable used to hold the element to
                          // queue
  var t: clock           // clock variable for synchronization

  // input from the env to register all sensors
  input registerUnits : {
    global: true ==> busy' = true

    local: true ==> state' := 1, l_sensor' := 0
  }

  // use the computed l_sensor to initialize the sensor with id l_sensor
  output arm : {
    l_sensor < n_sensors ==> sensor' = l_sensor & l_sensor' = l_sensor + 1
  }
  local tau : {
    state = 1 & l_sensor = n_sensors ==> state' = 2 & t' = 0
  }
  
  // now enter an infinite loop where we wish to synchronize on either
  // pass or ready

  local pollTimeout : {
    // mod n_sensors doesn't work as constants are not yet supported. So,
    // use constant 4 for the number of sensors for now
    state = 2 & t = 5 ==> state' = 3 & l_sensor' = l_sensor + 1 mod 4
  }
  output pass : {
    state = 3 & not busy ==> state' = 2 & sensor' = l_sensor & t' = 0
  }
  // if we synchronize with ready then we need to queue the sensor
  // that is ready
  output ready : {
    state = 3 & not busy ==> state' = 4 & l_qelement' = sensor &
                             sensor' = l_sensor & t' = 0
  }
  // now queue the element qelement
  output queue : {
    state = 4 ==> state' = 5 & qelement' = l_qelement
  }
  // when the Queue is done queueing we synchronize on the queued output
  input queued : {
    local: true ==> state' := 2, t' := 0
  }

  // For composability with the Queueing module we have an input
  // action dequeued, which does not nothing
  input dequeued : {}
  
endmodule

// dispatcher
// This module simply synchronizes with the dequeue output of the
// Queue module and generates go outputs to sensor modules

module Dispatcher:
  var state: [0..4]      // internal state
  var l_sensor: [0..3]   // sensor id from dequeue

  // initialize state
  input arm : {
    local: true ==> state' := 0
  }

  // when we synchronize with the Queue module on this action, we
  // will have a dequeued value available in the global variable
  // qelement. Set busy to indicate Dispatcher is taking control here
  output dequeue : {
    state = 0 ==> state' = 1 & busy' = true
  }
  // the Queue has dequeued an element into the global qelement
  input dequeued : {
    local: state = 1 ==> state' := 2
  }

  // update local sensor var and proceed to the state where we can
  // issue a go
  local assigning : {
    state = 2 & busy ==> state' = 3 & l_sensor' = qelement
  }
  // now that sensor has been updated with the id of the sensor that
  // should go next, output go and relinquish control by setting
  // busy to false
  output go : {
    state = 3 ==> state' = 4 & busy' = false & sensor' = l_sensor
  }
  // we don't need to do any book-keeping here for the sensor id as
  // only one sensor will be given the go-ahead at a time. So, the done
  // output will only be generated in a mutually exclusive fashion
  input done : {
    local: state = 4 ==> state' := 0
  }

  // For composability we have the following input actions
  input queue : {}
  input pass  : {}
  input ready : {}

endmodule

// round robin queue
// The following module is used to implement a round robin scheduling
// policy. The queue has four slots. It keeps a slot pointer that is
// initialized when the queue is armed and then maintains it based on
// queue or dequeue operations

module Queue:
  var qstate: [0..7]     // internal state
  var slot: [0..4]       // slot pointer. Ranges must start from 0!??
  var slot_1: [0..4]     // slot 1, 4 is the "slot empty" value
  var slot_2: [0..4]     // slot 2
  var slot_3: [0..4]     // slot 3
  var slot_4: [0..4]     // slot 4
  var l_qelement:[0..4]  // local qelement for dequeue

  // input that initializes the queue
  input arm : {
    local: true ==> slot' := 1, slot_1' := 4, slot_2' := 4,
                    slot_3' := 4, slot_4' := 4
  }

  // input that inserts an element into the queue.
  input queue : {
    local: qstate != 1 ==> qstate' := 1
  }

  // internal actions that check if the element to be inserted, namely
  // the sensor id is already in the queue. If it is in the queue the
  // module silently ignores the request
  local tau : {
    qstate = 1 & qelement != slot_1 ==> qstate' = 2
  }
  local tau : {
    qstate = 2 & qelement != slot_2 ==> qstate' = 3
  }
  local tau : {
    qstate = 3 & qelement != slot_3 ==> qstate' = 4
  }
  local tau : {
    qstate = 4 & qelement != slot_4 ==> qstate' = 5
  }

  // if the internal state is 5 the sensor id is queued in the slot
  // prior to the one pointed to be the slot variable
  local tau : {
    qstate = 5 & slot = 1 ==> slot_4' = qelement & qstate' = 6
  }
  local tau : {
    qstate = 5 & slot = 2 ==> slot_1' = qelement & qstate' = 6
  }
  local tau : {
    qstate = 5 & slot = 3 ==> slot_2' = qelement & qstate' = 6
  }
  local tau : {
    qstate = 5 & slot = 4 ==> slot_3' = qelement & qstate' = 6
  }
  output queued : {
    qstate = 6 ==> qstate' = 1
  }

  // this is the output that synchronizes with the dequeue input of the
  // polling module. We check if the slot pointed to by slot is non-empty
  // if it is non-empty, we output dequeue and set sensor to the contents
  // of the slot, else we simply make a local transition to the next slot

  input dequeue : {
    local: true ==> qstate' := 1
  }
  local tau : {
    qstate = 1 & slot = 1 & slot_1 != 4 ==> qstate' = 2 & l_qelement' = slot_1 &
                                            slot_1' = 4 & slot' = 2
  }
  local tau : {
    qstate = 1 & slot = 1 & slot_1 = 4 ==> slot' = 2
  }
  local tau : {
    qstate = 1 & slot = 2 & slot_2 != 4 ==> qstate' = 2 & l_qelement' = slot_2 &
                                            slot_2' = 4 & slot' = 3
  }
  local tau : {
    qstate = 1 & slot = 2 & slot_2 = 4 ==> slot' = 3
  }
  local tau : {
    qstate = 1 & slot = 3 & slot_3 != 4 ==> qstate' = 2 & l_qelement' = slot_3 &
                                            slot_3' = 4 & slot' = 4
  }
  local tau : {
    qstate = 1 & slot = 3 & slot_3 = 4 ==> slot' = 4
  }
  local tau : {
    qstate = 1 & slot = 4 & slot_4 != 4 ==> qstate' = 2 & l_qelement' = slot_4 &
                                            slot_4' = 4 & slot' = 1
  }
  local tau : {
    qstate = 1 & slot = 4 & slot_4 = 4 ==> slot' = 1
  }
  output dequeued : {
    qstate = 2 & l_qelement != 4 ==> qelement' = l_qelement
  }

endmodule
