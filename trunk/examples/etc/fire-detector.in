(*
 * Fire Detector example, from the FROCOS05 paper "Sociable Interfaces".
 *
 * This ocaml script demonstrates loading a model from a
 * file, instantiating modules, and composing them together.
 *)

(* In order to get convenient access to the Ticc functions,
 * we import them into the local namespace. *)
open Ticc;;

(* Load the model from a file, using the 'parse' function.
 * When you parse a file, the information is stored in
 * Ticc's global namespace.
 *)
parse "fire-detector.si";;


(* To do anything useful with the model, you need to instantiate
 * modules.  In the "fire-detector" example, we would like to
 * instantiate all three modules: the ControlUnit, and the
 * two FireDetectors.  (Notice that the two fire detectors have
 * different names.)
 *
 * To instantiate a module, we use the 'mk_sym' function
 * to look up the definition of a module and create a symbolic
 * representation out of the definition.  You can think of the
 * symbolic representation of a module as the state transition
 * diagram describing the module's behavior.  *)
let controlunit = mk_sym "ControlUnit";;
let fire1 = mk_sym "FireDetector1";;
let fire2 = mk_sym "FireDetector2";;

(* For debugging purposes, it can be helpful to print out
 * the symbolic representation of a module.  Internally,
 * we use logical formulas to represent the transition diagram;
 * this makes the representation a lot more compact, but sometimes
 * difficult to read. *)
print_symmod controlunit;;
print_symmod fire1;;
print_symmod fire2;;

(* The ultimate purpose of defining modules is to be able to
 * compose them.  The Ticc 'compose' function only composes two
 * modules at a time, so we have to do the composition in two steps. *)
let compose2 = compose controlunit fire1;;
let compose3 = compose compose2 fire2;;

(* And print the final composition. *)
print_symmod compose3;;

