(*
 * House example 
 *)

open Ticc;;

parse "house.si";;

let breaks      = mk_sym "Breaks";;
let calls	= mk_sym "Calls";;
let plumber     = mk_sym "Plumber";;
let electrician = mk_sym "Electrician";;
let rudelectr   = mk_sym "RudeElectrician";;
let floors      = mk_sym "Floors";;
let walls       = mk_sym "Walls";;
let clean       = mk_sym "Clean";;

(* To figure out what is going on *)
(* print_symmod rudelectr;; *)

let c = compose (compose calls plumber) electrician;;
let d = compose (compose calls plumber) rudelectr;;

let g                  = get_stateset rudelectr "RudeElectrician.guard";;
let plumber_in_kitchen = get_stateset plumber   "Plumber.plumber_in_kitchen";;
let trouble = set_and g plumber_in_kitchen;;
let reach = get_reachable d;;
let reachable_trouble = set_and trouble reach;;
if not (set_is_empty reachable_trouble) then print_string "There is reachable trouble!";;

print_string "\nRestriction in composition  calls || plumber || electrician :\n";;
print_input_restriction c "call_electr";;
print_string "\nRestriction in composition  calls || plumber || rude_electrician :\n";;
print_input_restriction d "call_electr";;


