// Example 
// Dining Philosophers

//global variables indicating state of the shared resources (forks)
var F1, F2, F3 : bool

//The initial condition 
//All forks are free initially

stateset initcond: ~F1 & ~F2 & ~F3

module Phil1:
       
       var s: [0..11]
       initial : s = 0
       //stateless F3, F1
       output think1:{
	      s = 0 ==> s' = 0        // s = 0 --> thinking state
       }

       input * : {} 

       output try1:{
	      s = 0 ==> s' = 1       // s = 1 --> start trying state
       } 
       
       output grabF3:{ 
	      s = 1 ==> s' = 2;       // s = 2 --> go for left fork, have none
	      s = 2 & F3 ==> s' = 4;  // s = 4 --> have the left fork 
              s = 2 & !F3 ==> s' = 2; // (stay) s=2 --> left  busy, have none
	      s = 5 & F3 ==> s' = 8;  // s = 8 --> have both forks 
              s = 5 & !F3 ==> s' = 7  // s = 7 --> right busy, have left fork
       } 
       output grabF1:{
	      s = 1 ==> s' = 3;       // s = 3 --> go for right fork, have none
	      s = 3 & F1 ==> s' = 5;  // s = 5 --> have right fork
	      s = 3 & !F1 ==> s' = 3; // (stay) s=3 --> right busy, have none
	      s = 4 & F1 ==> s' = 8;  // s = 8 --> have both forks
	      s = 4 & !F1 ==> s' = 6  // s = 6 --> left busy, have right fork
       }
       output eat1:{
	      s = 8 ==> s' = 9;       // s = 9 --> finished eating 
	      s = 9 ==> s' = 9
       }
       output giveup1:{
	      s = 6 ==> s' = 1 & F3' = true; //release left when right busy 
	      s = 7 ==> s' = 1 & F1' = true  //release right when left busy
       }
       output done1:{
	      s = 9 ==> s' = 10 & F3' = true; // s = 10 --> released left, have right
	      s = 9 ==> s' = 11 & F1' = true; // s = 11 --> released right, have left
	      s = 10 ==> s' = 0 & F1' = true; // go back thinking state
	      s = 11 ==> s' = 0 & F3' = true  // 
       }

endmodule

module Phil2:
       
       var s: [0..11]
       initial: s = 0
       //stateless F1, F2
       output think2:{
	      s = 0 ==> s' = 0
       }
       input * : { } 
       output try2:{
	      s = 0 ==> s' = 1
       } 
       
       output grabF1:{
	      s = 1 ==> s' = 2;
	      s = 2 & F1 ==> s' = 4;
              s = 2 & !F1 ==> s' = 2;
	      s = 5 & F1 ==> s' = 8;
              s = 5 & !F1 ==> s' = 7
       } 
       output grabF2:{
	      s = 1 ==> s' = 3;
	      s = 3 & F2 ==> s' = 5;
	      s = 3 & !F2 ==> s' = 3;
	      s = 4 & F2 ==> s' = 8;
	      s = 4 & !F2 ==> s' = 6 
       }
       output eat2:{
	      s = 8 ==> s' = 9;
	      s = 9 ==> s' = 9
       }
       output giveup2:{
	      s = 6 ==> s' = 1 & F1' = true;
	      s = 7 ==> s' = 1 & F2' = true
       }
       output done2:{
	      s = 9 ==> s' = 10 & F1' = true;
	      s = 9 ==> s' = 11 & F2' = true;
	      s = 10 ==> s' = 0 & F2' = true;
	      s = 11 ==> s' = 0 & F1' = true
       }

endmodule

module Phil3:
       
       var s: [0..11]
       initial: s = 0
       //stateless F2, F3
       output think3:{
	      s = 0 ==> s' = 0
       }
       input * : { } 
       output try3:{
	      s = 0 ==> s' = 1
       } 
       
       output grabF2:{
	      s = 1 ==> s' = 2;
	      s = 2 & F2 ==> s' = 4;
              s = 2 & !F2 ==> s' = 2;
	      s = 5 & F2 ==> s' = 8;
              s = 5 & !F2 ==> s' = 7
       } 
       output grabF3:{
	      s = 1 ==> s' = 3;
	      s = 3 & F3 ==> s' = 5;
	      s = 3 & !F3 ==> s' = 3;
	      s = 4 & F3 ==> s' = 8;
	      s = 4 & !F3 ==> s' = 6 
       }
       output eat3:{
	      s = 8 ==> s' = 9;
	      s = 9 ==> s' = 9
       }
       output giveup3:{
	      s = 6 ==> s' = 1 & F2' = true;
	      s = 7 ==> s' = 1 & F3' = true
       }
       output done3:{
	      s = 9 ==> s' = 10 & F2' = true;
	      s = 9 ==> s' = 11 & F3' = true;
	      s = 10 ==> s' = 0 & F3' = true;
	      s = 11 ==> s' = 0 & F2' = true
       }

endmodule