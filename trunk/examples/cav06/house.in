(*
 * House example 
 *)

open Ticc;;

parse "house.si";;

let breaks      = mk_sym "Breaks";;
let calls	= mk_sym "Calls";;
let plumber     = mk_sym "Plumber";;
let electrician = mk_sym "Electrician";;
let rudelectr   = mk_sym "RudeElectrician";;
let floors      = mk_sym "Floors";;
let walls       = mk_sym "Walls";;
let clean       = mk_sym "Clean";;

(* for debugging *)
(* print_symmod plumber;; *)

let c0 = compose breaks calls;; 
let c1 = compose c0 plumber;; 
let c2 = compose c1 electrician;;

let d2 = compose c1 rudelectr;;

let init  = mk_set "initcond";; 

let c2i = get_iinv c2;;
let d2i = get_iinv d2;;

let c2init = set_and init c2i;;
let d2init = set_and init d2i;;

print_string "\n c2init is empty? (should not be): ";; (* this should not be empty *)
print_bool (set_is_empty c2init);;
print_string "\n d2init is empty? (should be): ";; (* this should be empty *)
print_bool (set_is_empty d2init);;
print_string "\n";;

(*
let c3 = compose c2 floors;;
let c4 = compose c3 walls;;
let c  = compose c4 clean;;
*)

