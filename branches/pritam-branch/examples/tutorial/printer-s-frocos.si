//
// Example:
//   This example is a model of a shared printer server.
//   The model consists of modules representing the print
//   server, as well as user processes that communicate with the
//   server to print jobs. In the example, we fix the number of 
//   users to be 2. 
//   We will thus have three modules: a printer server and two 
//   users.

// Our implementation will allow a single print job at a time,
// and we keep track of the size and the user of the current
// print job. Hence we need the three following global variables:

var busy: bool     // This variable is set to true when the printer 
	           // is busy and to false in the other cases.
	           // A user can only send a job to the printer
		   // when busy is false.
var size: [0..10]  // size of the print job. The value of this
	           // variable is set arbitrarily by the user.
		   // It is bounded since a printer always has a 
		   // finite amount of memory.
var user: [0..2]   // This variable is set to id of the user that
                   // just send a job. Its value will not change 
		   // until an another user sends a job.
                   // We have two users. We never use the value 
                   // zero, but all ranges are required to begin
                   // at zero. 


// Modules can be defined in any order.
// We first define the Printer server, which wait for a job                     
// when it is not busy and then send acknowledgment when the job 
// has been treated.
// The state diagram for this server has two states: one in where 
// the global variable 'busy' is set to false and one where it is 
// set to true. The printer can only receive jobs when it is not busy.
// Basically, the printer stays in a state in where 'busy' is false
// until it receives a job.  
// In comparison to the fire detector example, it is not 
// necessary to create an artificial variable to distinguish the 
// states of the printer.
// Here is a ASCII description of the printer server.
// 
//        [busy = F] --print?--> [busy = T]
//        /\                             /
//         \------------ack!------------/ 
//


module Printer:

  // The module printer do not have local variables.

  // Although the state diagram, in this case,
  // has a nice flow from start to finish, we don't
  // write the transition rules in quite the same way.
  // Instead we break the module down into the actions
  // that can be sent and received, and then describe
  // the transitions that happen in each of these cases.


  input  print : {

    // Each input action has a local and a global part.
    // For the printer server, we only need to define the global
    // part since we only have to impose conditions on 'busy'.
    // Since the local part of the action is not defined, it is 
    // assumed to be true ==> true and thus do not influence the 
    // conjunction.
    // The input works as follow: when the printer server receives 
    // a job from a user, the variable busy goes to true to forbid
    // other users to interact it. Notice that the global part of this
    // transition only specifies pre and post conditions on the value of 
    // 'busy'. This is the user that will be responsible of
    // the change of value.

    global:
      not busy ==> busy'
  }

  output ack   : {
      // The action ack! is sent by the printer when it has treated
      // the job. In that case, the variable busy goes from true to 
      // false, allowing other Users to interact with the printer.
      // In that case, the printer is responsible of the change of value
      // of the variable 'busy'.      
      busy ==> not busy';
  } 

endmodule


// The users are also a very
//
// The state diagram looks like:
//
//         -----ack?-------                  
//        /\               \
//        [0] --print!--> [1]
//        (_)^            (_)^ 
//        print?          print?
// There are self-loops to each state, which accept the
// print? input action. This is so that this User can be
// safely composed with other users which might issue a 
// "print:" message.

module User1:

  // Define the local variables used by the module.
  // In this example, we have chosen to make a distinction between 
  // the state in where the user can send a job and the one in where
  // it is waiting for an acknowledgment.
  var s: [0..1]
 
  // the following line ensure that the two global variables
  // size and user are not history variables for User1.
  // Why aren't these variable history? Simply because when
  // a module output a job, it does not need to know the current 
  // values of these variables, it will even update them!
  stateless size, user

  output print : {
    // This output action can only be done when the printer is
    // not busy. 
    // the 'size' variable is set to a non deterministic value
    // modeling the fact that a user can send jobs of arbitrarily 
    // sizes. 

    s = 0  &  not busy 
           ==> s' = 1  &  busy'
	         &  user' = 1  &  nondet size'
  }

  input  print : { 
      // The "print" input action can be received from any
      // state and it does not change the state, so we don't
      // have to say anything. Declaring it as an input
      // action is enough.
  }  

  input  ack   : {

       // The global part of the input ack is empty.
       // it is the responsibility of the output ack to
       // reset the global variable 'busy' to false.
       

       // The local part of the input is deterministic.
    local:
            s = 1 ==> s' := 0
      else  s = 0 ==> 
      					
  }

endmodule


// This is a duplicate implementation of a User.
// Notice that it has been declared with a different name,
// so that it doesn't conflict with User1.
// The following module is a copy of User1. 
// The only difference is that the variable
// 'user' is set to 2 when the user output a job.

module User2:
  var s: [0..1]
  stateless size, user

  output print : { s  = 0 & not busy 
               ==> s' = 1 &    busy' & user' = 2 & nondet size' }

  input  print : { }  // print? is allowed and ignored 

  input  ack   : { local: s = 1 ==> s' := 0 
                   else  s = 0 ==> s' := 0        }  // ignore ack? when s=0 

endmodule

