//
// Example:
//   This example is a model of a shared printer server.
//   The model consists of modules representing the print
//   server, as well as user processes that communicate with the
//   server to print jobs. In the example, we fix the number of 
//   users to be 2. 
//   We will thus have three modules: a printer server and two 
//   users.
//   The difference between this example and the one of printer-s-frocos.si
//   is that we have the possibility of refusing a job when its size is greater
//   than 4. The rest of the example behaves as printer-s-frocos.si.


var busy: bool    // global variable indicating a printer busy 
var size: [0..10] // size of the print job
var user: [0..5]  // user who requested the job 

module Printer:
  output ack   : { busy & size < 5 ==> not busy' } // accept if size < 5
                               // ack? is not allowed

  output nack  : { busy & size > 4 ==> not busy' } // reject if size > 4
                               // nack? is not allowed

  input  print : { global: not busy ==> busy' }
endmodule

module User1:
  var s: [0..1]
  stateless size, user 

  output print : { s = 0 & not busy ==> busy' &
                                  s' = 1 & user' = 1 & nondet size' }
  input  print : { }  // print? is allowed and ignored 

  input  ack   : { local: s = 1 ==> s' := 0 
                    else  s = 0 ==> s' := 0        }  // ignore ack? when s=0 

  input  nack  : { local: s = 1 ==> s' := 0 
                    else  s = 0 ==> s' := 0        }  // ignore nack? when s=0 
endmodule

module User2:
  var s: [0..1]
  stateless size, user 

  output print : { s = 0 & not busy ==> busy' &
                                  s' = 1 & user' = 2 & nondet size' }
  input  print : { }  // print? is allowed and ignored 

  input  ack   : { local: s = 1 ==> s' := 0 
                   else   s = 0 ==> s' := 0        }  // ignore ack? when s=0 

  input  nack  : { local: s = 1 ==> s' := 0 
                   else   s = 0 ==> s' := 0        }  // ignore nack? when s=0 
endmodule
