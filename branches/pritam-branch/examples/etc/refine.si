// A module used to test refinement
// We check whether B refines (can replace) A

var g: [0..10]

module A: 
    var x, z: [0..3] 
    stateless g
    initial: x = 0 and z = 0  

    // Module A can emit at most 3 consecutive "splash",
    // without a reset.
    output splash: { true ==> x' = x + 1 }
    input  crack: { 
	global:
		g <= 5 ==> true
	local: 
		true ==> x' := 0 
    }
    local reset: { x=1 ==> x'=0 }

    // Now a group of independent actions:
    // If this local action is taken twice...
    local say_hello: { z<=1 ==> z'=z+1 } 
    // ...module B can say "hello"
    output hello:    { z=2  ==> true   }
endmodule


module B: 
    var y, z: [0..4] 
    stateless g
    initial: y = 0 and z = 0

    // B can emit at most 4 consecutive "splash"
    output splash: { y<4 ==> y' = y + 1 }
    input  crack: { 
	global:
		g <= 5 ==> true
	local: 
		true ==> y' := 0 
    }
    // B can accept an extra input (no problem)
    input extra: { }
    // An extra output would be a problem!
    // output bla: { }

    // An overcomplicated local action that can increase or
    // decrease the number of "splash" that module A can emit
    // in a row.
    local shhh: { y<3 ==> y' = y + 1;
                  y=3 ==> y'=0;
		  y=4 ==> true }

    // Now a group of independent actions:
    // If this local action is taken once...
    local say_hello: { z=0 ==> z' = 1 }
    // ...module B can say "Hello"
    output hello:    { z=1 ==> true }
endmodule


